#!/bin/python3

# import
import sys
import os
from pydoc import pager

# colorama
while True:
        try:
            from colorama import Fore, Back, Style
        except ModuleNotFoundError:
            print("installing colorama using pip.")
            os.system("pip install colorama")
        else:
            break


# termsize
cols,lines=os.get_terminal_size()
# print(cols,"x",lines)

# args
import argparse
parser=argparse.ArgumentParser(
                    prog=sys.argv[0],
                    description = 'search your files',
                    epilog = 'üîçüîé')

parser.add_argument('query',help="the query to search")

parser.add_argument('-t','--threads',help="the maximum treads",type=int,metavar='N',default=3)
parser.add_argument('-p','--pager',help="pipe output to a pager",action='store_true')
parser.add_argument('-D','--no-dir',action='store_true',help="don't show current directory when searching")

arg=parser.parse_args()


clstr=" " * cols
def clline():
    print(clstr,end='')
    print("\r",end='')

if arg.pager:
    global results
    results="results:"
    def match(mc):
        global results, rc
        if arg.query in mc:
            results=f"{results}\n{mc}"
            rc=rc+1
else:
    def match(mc):
        global rc
        if arg.query in mc:
            print(Back.WHITE+Fore.BLACK+"match:"+Style.RESET_ALL,os.getcwd()+'/'+mc)
            rc=rc+1
#


if arg.no_dir:
    print('nodir on')
    def path():
        pass
else:
    def path():
        path=os.getcwd()
        clline()
        print(path[0:cols-1]+"\r",end='')
#

def _s():
    tasks=0
    for f in os.listdir():
        if os.path.isfile(f): # file
            match(f)
        elif os.path.islink(f):
            match(f)
        elif os.path.isdir(f): # dir
            match(f)
            #
            os.chdir(f)
            path()
            s()
            path()
            os.chdir("..")
    # await asyncio.wait([proc])
#
def s():
    try:
        _s()
    except RecursionError:
        clline()
        print("\rmax subdirectory level of",sys.getrecursionlimit(),"reached.","This won't stop me, but i cant search deeper than here.")
        path()
    except KeyboardInterrupt:
        clline()
        print("\rinterrupted by user. stopping.\n")
        sys.exit(0)
    except Exception as e:
        clline()
        print("unknown exception:",str(e))

global rc
rc=0

print("searching for",arg.query,"...")
if not arg.pager:
    print(Back.WHITE+Fore.BLACK+"=" * cols+Style.RESET_ALL+"\n")
s()
if not arg.pager:
    clline()
    print("\n"+Back.WHITE+Fore.BLACK+"=" * cols+Style.RESET_ALL)
print("done\nfound",rc,"results")

if arg.pager:
    pager(results)
